{"ast":null,"code":"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context.js';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, forwardedRef) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(forwardedRef, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, forwardedRef) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(forwardedRef, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]);\n    // @ts-ignore _contentNode missing in type definition\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, forwardedRef) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(forwardedRef, () => instance);\n    return null;\n  }\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}