{"ast":null,"code":"import { createElementHook, createElementObject, createLayerHook, updateMediaOverlay } from '@react-leaflet/core';\nimport { SVGOverlay as LeafletSVGOverlay } from 'leaflet';\nimport { forwardRef, useImperativeHandle } from 'react';\nimport { createPortal } from 'react-dom';\nexport const useSVGOverlayElement = createElementHook(function createSVGOverlay(props, context) {\n  const {\n    attributes,\n    bounds,\n    ...options\n  } = props;\n  const container = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  container.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  if (attributes != null) {\n    Object.keys(attributes).forEach(name => {\n      container.setAttribute(name, attributes[name]);\n    });\n  }\n  const overlay = new LeafletSVGOverlay(container, bounds, options);\n  return createElementObject(overlay, context, container);\n}, updateMediaOverlay);\nexport const useSVGOverlay = createLayerHook(useSVGOverlayElement);\nfunction SVGOverlayComponent({\n  children,\n  ...options\n}, forwardedRef) {\n  const {\n    instance,\n    container\n  } = useSVGOverlay(options).current;\n  useImperativeHandle(forwardedRef, () => instance);\n  return container == null || children == null ? null : /*#__PURE__*/createPortal(children, container);\n}\nexport const SVGOverlay = /*#__PURE__*/forwardRef(SVGOverlayComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}